#+TITLE: Emacs configuration
#+AUTHOR: Jean-Baptiste Loutfalla
#+STARTUP: overview
#+LANGUAGE: en
#+OPTIONS: toc:nil num:nil

* Special thanks
First of all, I would like to thanks Uncle Dave (known as [[https://www.youtube.com/channel/UCDEtZ7AKmwS0_GNJog01D2g][Uncle Dave]] on YouTube or [[https://github.com/daedreth/UncleDavesEmacs][daedreth]] on GitHub)
and his Emacs Tutorial series which helped me a lot to use Emacs.
This configuration file is based on the one he made and from different
other people as [[https://github.com/munen/emacs.d][Alain M. Lafon]] or [[https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org][Harry R. Schwartz]].

* Dependencies
** Spelling checker
*** From package manager
- =aspell=, for English spelling (don't forget to install dictionaries).

** Programming
*** From package manager
- =clang=, for C/C++ completion.
- =sbcl=, for clisp completion and repl.
- =php=, for PHP check.
- =racer= and =rustfmt=, for Rust completion and format.
- =python-epc=, for use =python-jedi=.
- =python-jedi=, for Python completion.

** Exporting
*** From the package manager
+ =texlive=, for exportations using LaTeX.
+ =pygmentize=, for code highlighting when export to PDF.

* Some notes
** On use-package some more
I utilize =use-package= to handle downloading and configuring other packages painlessly.
With =init.el= written the way it is, Emacs checks for the presence of =use-package=
on launch and downloads it and installs if necessary.

** On the format of the configuration
As you may have notices, this is the configuration file itself.
This configuration is written in =org-mode=.
On launch, this file is being sourced into =~/.emacs.d/init.el=, the prosed will be automatically
stripped out and the remaining =config.el= is parsed.

This is also the reason why your org-mode configuration should never be called =init.org=.

* Needs at startup
** Garbage collection
Allow 20MB of memory instead of 0.76MB before calling the garbage collector.
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 20000000)
#+END_SRC

** Activate the MELPA depot
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (setq package-archives '(("gnu"   . "https://elpa.gnu.org/packages/")
                           ("org"   . "https://orgmode.org/elpa/")
                           ("melpa" . "https://melpa.org/packages/")
                           ("ELPA"  . "http://tromey.com/elpa/")))
  (package-initialize)
#+END_SRC

** Boostrapping =use-package=
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

* Theme
** Base16 Tomorrow Night theme
I use the Base16 Tomorrow Night theme because it doesn't mess up when Emacs is in the terminal.
#+BEGIN_SRC emacs-lisp
  (use-package base16-theme
    :ensure t
    :config
    (load-theme 'base16-tomorrow-night t))
#+END_SRC

* Basic Interface Settings
There are some setting that do not depend on packages and are built-in enhancements to UI.
** Looks
*** Disable menus and scrollbars
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

*** Visible bell
#+BEGIN_SRC emacs-lisp
  (setq visible-bell t)
#+END_SRC

*** Set UTF-8 encoding
#+BEGIN_SRC emacs-lisp
  (setq local-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

*** Highlight current line
#+BEGIN_SRC emacs-lisp
  (when window-system (global-hl-line-mode t))
#+END_SRC

*** Cursor position
Show in the mini-buffer the current line and column number of the cursor.
#+BEGIN_SRC emacs-lisp
  (setq line-number-mode t)
  (setq column-number-mode t)
#+END_SRC

** Functionality
*** Do not create backup files
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC

*** Change the location of auto-save files to =/tmp=
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory)))
#+END_SRC

*** Always follow symlinks
#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC

*** Auto revert files on change
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC

*** Change yes-or-no questions into y-or-n questions
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Async
Use of asynchronous processes wherever it's possible.
#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t
    :init
    (dired-async-mode 1))
#+END_SRC

* Terminal
** Setting default Shell to Zsh
#+BEGIN_SRC emacs-lisp
  (defvar my-terminal-shell "/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-terminal-shell)))
  (ad-activate 'ansi-term)
#+END_SRC

** Keybinding
Since I use i3 and the default keybinding to open a terminal is =S-Return=,
I can use this in Emacs to open a terminal.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<C-return>") 'ansi-term)
#+END_SRC

* Help for use Emacs
** which-key
This package will show you all keybindings possible when you start one.
It can be really useful when you don't remember a long keybinding.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC

* Minor conveniences
** French spelling/grammar checker - Grammalecte
Since I'm a french person, it can be useful to have it.
After installing it, you need to run =flycheck-grammalecte-download-grammalecte=.
#+BEGIN_SRC emacs-lisp
  (setq flycheck-grammalecte-enabled-modes '(org-mode
                                             text-mode
                                             mail-mode
                                             latex-mode))

  (setq flycheck-grammalecte-report-spellcheck nil)
  (setq flycheck-grammalecte-report-apos nil)
  (setq flycheck-grammalecte-report-nbsp nil)

  (use-package flycheck-grammalecte
    :ensure t)
#+END_SRC

** Edit/Open the configuration
Simply pressing =C-c e= will open this file. You can also invoke =edit-config=.
#+BEGIN_SRC emacs-lisp
  (defun edit-config ()
    "Edit/Open ~/.emacs.d/config.org"
    (interactive)
    (setq-local config-file "~/.emacs.d/config.org")
    (when (file-readable-p config-file)
      (find-file config-file)))

  (global-set-key (kbd "C-c e") 'edit-config)
#+END_SRC

** Reloading the configuration
Simply pressing =C-c r= will reload this file. You can also invoke =config-reload=.
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    "Reloads ~/.emacs.d/config.org at runtime"
    (interactive)
    (setq-local config-file "~/.emacs.d/config.org")
    (when (file-readable-p config-file)
      (org-babel-load-file (expand-file-name config-file))))

  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC

** Electric
Enable automatic closing brackets, parentheses, quotation marks, ...
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '((?\{ . ?\})
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\" . ?\")))
  (electric-pair-mode t)
#+END_SRC

** Rainbow
Highlights hexadecimal codes that resembles a color in the appropriate color.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC

** Rainbow delimiters
Color parentheses and other delimiters depending of their depth.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

** Show parens
Highlights matching parens when the cursor is just behind one of them
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

** Line numbers
Enables relative line numbers for programming-related modes.
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :ensure t
    :config
    (setq linum-relative-current-symbol "")
    (setq linum-relative-backend 'display-line-numbers-mode)
    (add-hook 'prog-mode-hook 'linum-relative-mode))
#+END_SRC 

** Sub words
Makes Emacs considers camelCase strings as multiple words.
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC

** Replace the selected region
Enables replacing directly a selected region by what you type.
#+BEGIN_SRC emacs-lisp
  (pending-delete-mode t)
#+END_SRC

** Expand region
Expends region from the cursor to the word, sentence, ...
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-q" . er/expand-region))
#+END_SRC

** Tabs indentation and completion
Replace tabs by spaces.
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

Enables tab completions.
#+BEGIN_SRC emacs-lisp
  (setq tab-always-indent t)
  (add-to-list 'completion-styles 'initials t)
#+END_SRC

** =beacon=
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1))
#+END_SRC

* Programming
** auto-complete
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :config
    (ac-config-default))
#+END_SRC

** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))
#+END_SRC

** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t)
#+END_SRC

** company mode
The delay for company mode to kick in half a second and starts completion after 2 characters.

I prefer =C-n= and =C-p= to navigate around the items.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3))

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (define-key company-active-map (kbd "SPC") #'company-abort))
#+END_SRC

** Specific languages
*** C/C++
**** yasnippet
#+BEGIN_SRC emacs-lisp
  (add-hook 'c++-mode-hook 'yas-minor-mode)
  (add-hook 'c-mode-hook 'yas-minor-mode)
#+END_SRC

**** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-clang-analyzer
    :ensure t
    :config
    (with-eval-after-load 'flycheck
      (require 'flycheck-clang-analyzer)
      (flycheck-clang-analyzer-setup)))
#+END_SRC

**** company
Requires libclang to be installed.
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode))

  (use-package company-c-headers
    :ensure t)

  (use-package company-irony
    :ensure t
    :config
    (setq company-backends '((company-c-headers
			      company-dabbrev-code
			      company-irony))))

  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
#+END_SRC

*** Rust
**** rust-mode
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t
    :config
    (setq rust-format-mode-on-save t)
    (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
    (setq company-tooltip-align-annotations t)
    (add-hook 'rust-mode-hook
              (lambda () (setq indent-tabs-mode nil))))
#+END_SRC

**** rustfmt
#+BEGIN_SRC emacs-lisp
  (setq rust-format-on-save t)
#+END_SRC

**** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-rust
    :ensure t
    :config
    (with-eval-after-load 'flycheck
      (require 'rust-mode)
      (add-hook 'flycheck-mode-hook 'flycheck-rust-setup)
      (add-hook 'rust-mode-hook 'flycheck-mode)))
#+END_SRC

**** cargo
#+BEGIN_SRC emacs-lisp
  (use-package cargo
    :ensure t
    :config
    (with-eval-after-load 'rust-mode
      (add-hook 'rust-mode-hook 'cargo-minor-mode)))
#+END_SRC

**** racer
#+BEGIN_SRC emacs-lisp
  (use-package racer
    :ensure t
    :config
    (add-hook 'rust-mode-hook 'racer-mode)
    (add-hook 'racer-mode-hook 'eldoc-mode)
    (add-hook 'racer-mode-hook 'company-mode))
#+END_SRC

**** company
#+BEGIN_SRC emacs-lisp
  (use-package company-racer
    :ensure t
    :config
    (add-to-list 'company-backends 'company-racer))
#+END_SRC
*** Emacs Lisp
**** eldoc
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
#+END_SRC

**** yasnippet
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
#+END_SRC

**** company
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'company-mode)

  (use-package slime
    :ensure t
    :config
    (setq inferior-lisp-program "/usr/bin/sbcl")
    (setq slime-contribs '(slime-fancy)))

  (use-package slime-company
    :ensure t
    :init
    (slime-setup '(slime-fancy slime-company)))
#+END_SRC

*** Scheme
Use GNU Guile as the interpreter.
#+BEGIN_SRC emacs-lisp
  (setq scheme-program-name "guile")
#+END_SRC

*** Bash
**** yasnippet
#+BEGIN_SRC emacs-lisp
  (add-hook 'shell-mode-hook 'yas-minor-mode)
#+END_SRC

**** flycheck
#+BEGIN_SRC emacs-lisp
  (add-hook 'shell-mode-hook 'flycheck-mode)
#+END_SRC

**** company
#+BEGIN_SRC emacs-lisp
  (add-hook 'shell-mode-hook 'company-mode)

  (defun shell-mode-company-init ()
    (setq-local company-backends '((company-shell
				    company-shell-env
				    comapny-etags
				    company-dabbrev-code))))

  (use-package company-shell
    :ensure t
    :config
    (add-hook 'shell-mode-hook 'shell-mode-company-init))
#+END_SRC

*** PHP
**** php-mode
#+BEGIN_SRC emacs-lisp
  (use-package php-mode
    :ensure t)
#+END_SRC

**** flycheck
#+BEGIN_SRC emacs-lisp
  (add-hook 'php-mode'hook 'flycheck-mode)
#+END_SRC

**** company
#+BEGIN_SRC emacs-lisp
  (add-hook 'php-mode-hook 'company-mode)

  (defun php-mode-company-init ()
    (setq-local company-backends '(company-ac-php-backend)))

  (use-package company-php
    :ensure t
    :config
    (add-hook 'php-mode-hook 'php-mode-company-init))
#+END_SRC

*** Python
**** flycheck
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook 'flycheck-mode)
#+END_SRC

**** company
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook 'company-mode)

  (use-package company-jedi
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-jedi))
#+END_SRC

* Org
** auto-complete
#+BEGIN_SRC emacs-lisp
  (use-package org-ac
    :ensure t
    :config
    (org-ac/config-default))
#+END_SRC

** Common settings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)

  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-src-window-setup 'current-window)

  (add-hook 'org-mode-hook 'org-indent-mode)
  (add-hook 'org-mode-hook 'auto-fill-mode)
#+END_SRC

Allow =babel= to execute Emacs lisp, Shell, Python code.
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)
     (python . t)))
#+END_SRC

Don't ask before evaluating code blocks.
#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

** Exporting
Allow export to beamer (for presentations).
#+BEGIN_SRC emacs-lisp
  (require 'ox-beamer)
#+END_SRC

*** Exporting to HTML
Don't include a footer with my contact and publishing information.
#+BEGIN_SRC emacs-lisp
  (setq org-html-postamble nil)
#+END_SRC

**** emacs-htmlize 
#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :ensure t)
#+END_SRC

**** ox-twbs
#+BEGIN_SRC emacs-lisp
  (use-package ox-twbs
    :ensure t)
#+END_SRC

*** Exporting to PDF
This will allow syntax highlighting in the code in PDFs. I use the =minted= package, but if it shells out to =pygments= to do the actual work.
=pdflatex= usually disallows shell command so this will enables that :
#+BEGIN_SRC emacs-lisp
  (setq org-latex-pdf-process
        '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

Include the =minted= package in all my LaTeX exports.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)
#+END_SRC

*** TeX configuration
Automatically parse the file after loading it.
#+BEGIN_SRC emacs-lisp
  (setq TeX-parse-self t)
#+END_SRC

Always use =pdflatex= when compiling LaTeX documents.
#+BEGIN_SRC emacs-lisp
  (setq TeX-PDF-mode t)
#+END_SRC
