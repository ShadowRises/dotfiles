#+STARTUP: overview
#+TITLE: My Emacs configuration
#+CREATOR: Jean-Baptiste Loutfalla
#+LANGUAGE: en

* Special thanks
First of all, I would like to thanks Uncle Dave (known as [[https://www.youtube.com/channel/UCDEtZ7AKmwS0_GNJog01D2g][Uncle Dave]] on YouTube or [[https://github.com/daedreth][daedreth]] on GitHub)
and his Emacs Tutorial series which helped me a lot to use Emacs.
This congiguration file is based on the one he made but I had some modifications.


* Dependencies for :
** Fonts
*** From package manager :
- =terminus-font=, for it to work out of the box, if you don't want terminus you need to edit you =init.el=.

** Programming
*** From package manager :
- =clang=, for C/C++ completion.
- =sbcl=, for clisp completion and repl.
- =php=, for PHP check.

* Some notes
** On use-package some more
I utilize =use-package= to handle downloading and configuring other packages painlessly.
With =init.el= written the way it is, Emacs checks for the presence of =use-package=
on launch and downloads it and installs if necessary.

** On the format of the configuration
As you may have notices, this is the configuration file itself.
This configuration is written in =org-mode=.
On launch, this file is being sourced into =~/.emacs.d/init.el=, the prosed will be automatically
stripped out and the remaing =config.el= is parsed.

This is also the reason why your org-mode configuration should never be called =init.org=.

* Theme
** Zerodark theme
For now I'm using the Zerodark theme.
#+BEGIN_SRC emacs-lisp
  (use-package zerodark-theme
    :ensure t
    :init
    (load-theme 'zerodark t))
#+END_SRC

* Basic Interface Settings
There are some setting that do not depend on packages and are built-in enhancements to UI.

** Looks
*** Disable menus and scrollbars
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

*** Disable bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

*** Set UTF-8 encoding
#+BEGIN_SRC emacs-lisp
  (setq local-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

*** Highlight current line
#+BEGIN_SRC emacs-lisp
  (when window-system (global-hl-line-mode t))
#+END_SRC

*** Cursor position
Show in the mini-buffer the current line and column number of the cursor.
#+BEGIN_SRC emacs-lisp
  (setq line-number-mode t)
  (setq column-number-mode t)
#+END_SRC

** Functionality
*** Change the location of backup files
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs-backup")))
  (setq backup-by-copying-when-linked t)
#+END_SRC

*** Change yes-or-no questions into y-or-n questions
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Async
Use of asynchronous processes whereever it's possible.
#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t
    :init
    (dired-async-mode 1))
#+END_SRC

* Terminal
** Setting default Shell to Bash
#+BEGIN_SRC emacs-lisp
  (defvar my-terminal-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-terminal-shell)))
  (ad-activate 'ansi-term)
#+END_SRC

** Keybinding
Since I use i3 and the default keybinding to open a terminal is =S-Return=,
I can use this in Emacs to open a terminal.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<C-return>") 'ansi-term)
#+END_SRC

* Help for use Emacs
** which-key
This package will show you all keybindings possible when you start one.
It can be really useful when you don't remember a long keybinding.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC

* Minor conveniences
** Edit/Open the configuration
Simply pressing =C-c e= will open this file. You can also invoke =edit-config=.
#+BEGIN_SRC emacs-lisp
  (defun edit-config ()
    "Edit/Open ~/.emacs.d/config.org"
    (interactive)
    (setq-local config-file "~/.emacs.d/config.org")
    (when (file-readable-p config-file)
      (find-file config-file)))

  (global-set-key (kbd "C-c e") 'edit-config)
#+END_SRC

** Reloading the configuration
Simply pressing =C-c r= will reload this file. You can also invoke =config-reload=.
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    "Reloads ~/.emacs.d/config.org at runtime"
    (interactive)
    (setq-local config-file "~/.emacs.d/config.org")
    (when (file-readable-p config-file)
      (org-babel-load-file (expand-file-name config-file))))

  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC

** Electric
Enable automatic closing brakets, parentheses, quotation marks, ...
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '((?\{ . ?\})
			      (?\( . ?\))
			      (?\[ . ?\])
			      (?\" . ?\")))
  (electric-pair-mode t)
#+END_SRC

** Rainbow
Highlights hexadecimal codes that resembles a color in the appropriate color.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC

** Rainbow delimiters
Color parentheses and other delimiters depending of their depth.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

** Show parens
Highlights matching parens when the cursor is just behind one of them
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

** Line numbers
Enables relative line numbers for programming-related modes.
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :ensure t
    :config
    (setq linum-relative-current-symbol "")
    (setq linum-relative-backend 'display-line-numbers-mode)
    (add-hook 'prog-mode-hook 'linum-relative-mode))
#+END_SRC 

** Subwords
Makes Emacs considers camelCase strings as multiple words.
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC

** Replace the selected region
Enables replacing directly a selected region by what you type.
#+BEGIN_SRC emacs-lisp
  (pending-delete-mode t)
#+END_SRC

** Expand region
Expends region from the cursor to the word, sentence, ...
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-q" . er/expand-region))
#+END_SRC

** Tab completion
#+BEGIN_SRC emacs-lisp
  (setq tab-always-indent t)
  (add-to-list 'completion-styles 'initials t)
#+END_SRC

* Programming
Minor, non-completion related settings and plugins for writing code

** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))
#+END_SRC

** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t)
#+END_SRC

** company mode
The delay for copany mode to kick in half a second and starts completion after 2 characters.

I prefer =C-n= and =C-p= to navigate around the items.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3))

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (define-key company-active-map (kbd "SPC") #'company-abort))
#+END_SRC

** Specific languages
*** C/C++
**** yasnippet
#+BEGIN_SRC emacs-lisp
  (add-hook 'c++-mode-hook 'yas-minor-mode)
  (add-hook 'c-mode-hook 'yas-minor-mode)
#+END_SRC

**** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-clang-analyzer
    :ensure t
    :config
    (with-eval-after-load 'flycheck
      (require 'flycheck-clang-analyzer)
      (flycheck-clang-analyzer-setup)))
#+END_SRC

**** company
Requires libclang to be installed.
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode))

  (use-package company-c-headers
    :ensure t)

  (use-package company-irony
    :ensure t
    :config
    (setq company-backends '((company-c-headers
			      company-dabbrev-code
			      company-irony))))

  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
#+END_SRC

*** Rust
**** rust-mode
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t
    :config
    (setq rust-format-mode-on-save t)
    (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
    (setq company-tooltip-align-annotations t))
#+END_SRC

**** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-rust
    :ensure t
    :config
    (with-eval-after-load 'rust-mode
      (require 'flycheck-rust)
      (add-hook 'flycheck-mode-hook 'flycheck-rust-setup)
      (add-hook 'rust-mode-hook 'flycheck-mode-hook)))
#+END_SRC

**** cargo
#+BEGIN_SRC emacs-lisp
  (use-package cargo
    :ensure t
    :config
    (with-eval-after-load 'rust-mode
      (add-hook 'rust-mode-hook 'cargo-minor-mode)))
#+END_SRC

**** racer
#+BEGIN_SRC emacs-lisp
  (use-package racer
    :ensure t
    :config
    (add-hook 'rust-mode-hook 'racer-mode)
    (add-hook 'racer-mode-hook 'eldoc-mode)
    (add-hook 'racer-mode-hook 'company-mode))
#+END_SRC

**** company
#+BEGIN_SRC emacs-lisp
  (use-package company-racer
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-racer))
#+END_SRC

*** Emacs Lisp
**** eldoc
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
#+END_SRC

**** yasnippet
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
#+END_SRC

**** company
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'company-mode)

  (use-package slime
    :ensure t
    :config
    (setq inferior-lisp-program "/usr/bin/sbcl")
    (setq slime-contribs '(slime-fancy)))

  (use-package slime-company
    :ensure t
    :init
    (require 'company)
    (slime-setup '(slime-fancy slime-company)))
#+END_SRC

*** Bash
**** yasnippet
#+BEGIN_SRC emacs-lisp
  (add-hook 'shell-mode-hook 'yas-minor-mode)
#+END_SRC

**** flycheck
#+BEGIN_SRC emacs-lisp
  (add-hook 'shell-mode-hook 'flycheck-mode)
#+END_SRC

**** company
#+BEGIN_SRC emacs-lisp
  (add-hook 'shell-mode-hook 'company-mode)

  (defun shell-mode-company-init ()
    (setq-local company-backends '((company-shell
				    company-shell-env
				    comapny-etags
				    company-dabbrev-code))))

  (use-package company-shell
    :ensure t
    :config
    (require 'company)
    (add-hook 'shell-mode-hook 'shell-mode-company-init))
#+END_SRC

*** PHP
**** php-mode
#+BEGIN_SRC emacs-lisp
  (use-package php-mode
    :ensure t)
#+END_SRC

**** flycheck
#+BEGIN_SRC emacs-lisp
  (add-hook 'php-mode'hook 'flycheck-mode)
#+END_SRC

**** company
#+BEGIN_SRC emacs-lisp
  (add-hook 'php-mode-hook 'company-mode)

  (defun php-mode-company-init ()
    (setq-local company-backends '(company-ac-php-backend)))

  (use-package company-php
    :ensure t
    :config
    (require 'company)
    (add-hook 'php-mode-hook 'php-mode-company-init))
#+END_SRC

* Org
** Common settings
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-src-window-setup 'current-window)
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC
